{"meta":{"title":"小蝌蚪(smallCoder)","subtitle":"我只是大自然的搬运工 务实 创新","description":"做最专业的 IT 人","author":"苟鸿人","url":"http://yoursite.com"},"pages":[{"title":"联系方式","date":"2017-12-14T08:24:49.000Z","updated":"2017-12-14T09:33:49.774Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"请联系我 手机：15114018540 Email：373297055@qq.com QQ/微信号：15114018540"},{"title":"关于我","date":"2017-12-14T08:23:28.000Z","updated":"2017-12-14T08:23:28.273Z","comments":true,"path":"关于我/index.html","permalink":"http://yoursite.com/关于我/index.html","excerpt":"","text":""}],"posts":[{"title":"太通安全并购企业问卷调查","slug":"太通安全并购企业问卷调查","date":"2017-12-20T03:19:53.000Z","updated":"2017-12-26T03:27:39.090Z","comments":true,"path":"2017/12/20/太通安全并购企业问卷调查/","link":"","permalink":"http://yoursite.com/2017/12/20/太通安全并购企业问卷调查/","excerpt":"","text":"太通安全科技有限公司 太通安全股权结构 主要人员 企业关系由企业关系可以找出与太通安全有关联的一些公司，那么这些公司哪些是太通安全并购的呢？逐一分析相关联的各个公司 南京久润安全科技有限公司 公司简介注册资金：2000万南京久润安全科技有限公司于2002年08月07日在南京市雨花台区市场监督管理局登记成立。法定代表人孙涛，公司经营范围包括安全技术研发；工程管理服务；建筑消防设施维修保养等。 财务信息 资产信息 主要人员 资质证书 太通建设有限公司 公司简介注册资金：5000万太通建设有限公司于1994年05月17日在怀柔分局登记成立。法定代表人唐九庆，公司经营范围包括专业承包；技术检测；消防产品的技术开发、技术咨询、技术服务；消防产品及设施的维护和保养；消防安全评估；房屋租赁；销售消防设备及器材、建筑材料、计算机配件、办公用品、水处理设备；水处理系统及设备的技术服务、技术咨询、技术开发。 财务信息 资产信息 人员信息 资质证书证书太多请点击天眼查 北京金玉航辉消防安全技术有限公司 公司简介注册资金：400万太通建设有限公司于2004年01月14日在海淀分局登记成立。法定代表人郭志伟，公司经营范围包括消防安全技术服务、技术咨询；电气防火检测、消防安全检测。 财务信息 资产信息 主要人员 资质证书没有，天眼查上面没有数据 北京城建太捷工程咨询有限责任公司 公司简介注册资金：500万北京城建太捷工程咨询有限责任公司成立于2013年08月19日，主要经营范围为建筑工程咨询；消防方面的技术检测；技术咨询；技术服务；技术开发、技术转让。 股东信息 资产信息 主要人员 资质证书没有，天眼查上面没有数据 中新房金襄（山西）精密工业有限公司 公司简介注册资金：1亿中新房金襄（山西）精密工业有限公司成立于2017年04月11日，主要经营范围为锻件制造，机械加工；道路货物运输:大型货物道路运输；物业服务；企业管理，商务咨询，广告制作、代理、发布，会议服务，企业策划；销售:日用百货、船舶配件、建筑材料、塑料制品、橡胶制品、玻璃制品、电气设备、机械设备、汽车配件、五金交电、化工产品(危险化学品除外)。 股东信息 资产信息 主要人员 资质证书没有，天眼查上面没有数据 鲲翔（北京）消防科技有限公司 公司简介注册资金：2000万鲲翔（北京）消防科技有限公司成立于2016年12月2日，主要经营范围为技术开发、技术推广、技术转让、技术咨询、技术服务；教育咨询（中介服务除外）。 股东信息 资产信息 主要人员 资质证书没有，天眼查上面没有数据 陕西坚瑞消防安全设备有限公司 公司简介注册资金：3000万陕西坚瑞消防安全设备有限公司成立于2016年2月29日，主要经营范围为一般经营项目：七氟丙烷气体灭火系统及装置、IG541气体灭火系统、干粉灭火系统及装置、细水雾灭火系统及装置的研发、生产与销售；消防工程系统、楼宇自动化控制系统的设计、安装；消防设备维修、保养；消防技术咨询服务；气体灭火系统监测、维护；消防气瓶检测、维修。货物及技术的进出口业务（国家限定或禁止公司经营的商品和技术除外）。 股东信息 资产信息 主要人员 资质证书没有，天眼查上面没有数据 陕西捷泰信消防安全设备有限公司 公司简介注册资金：3000万陕西坚瑞消防安全设备有限公司成立于2016年2月29日，主要经营范围为一般经营项目：七氟丙烷气体灭火系统及装置、IG541气体灭火系统、干粉灭火系统及装置、细水雾灭火系统及装置的研发、生产与销售；消防工程系统、楼宇自动化控制系统的设计、安装；消防设备维修、保养；消防技术咨询服务；气体灭火系统监测、维护；消防气瓶检测、维修。货物及技术的进出口业务（国家限定或禁止公司经营的商品和技术除外）。 股东信息 资产信息 主要人员 资质证书没有，天眼查上面没有数据 陕西坚瑞沃能股份有限公司 公司简介注册资金：24.33亿陕西坚瑞消防安全设备有限公司成立于2016年2月29日，主要经营范围为一般经营项目：七氟丙烷气体灭火系统及装置、IG541气体灭火系统、干粉灭火系统及装置、细水雾灭火系统及装置的研发、生产与销售；消防工程系统、楼宇自动化控制系统的设计、安装；消防设备维修、保养；消防技术咨询服务；气体灭火系统监测、维护；消防气瓶检测、维修。货物及技术的进出口业务（国家限定或禁止公司经营的商品和技术除外）。 股东信息（十大股东20170930） 资产信息 主要人员 资质证书没有，天眼查上面没有数据","categories":[],"tags":[]},{"title":"mybatis逆向工程生成源码","slug":"mybatis逆向工程生成源码","date":"2017-12-15T07:38:12.000Z","updated":"2017-12-16T01:41:17.260Z","comments":true,"path":"2017/12/15/mybatis逆向工程生成源码/","link":"","permalink":"http://yoursite.com/2017/12/15/mybatis逆向工程生成源码/","excerpt":"","text":"逆向工程字面意思就是反向生成工程, 和 Hibernate一样, MyBatis也有自己的逆向工程工具。详细信息请看官方文档 使用MyBatis逆向工程, 我们就不用再手动创建Model实体类以及对应的Mapper.xml文件和dao类；它可以直接连接数据库的表自动帮我们完成这些操作。是不是很方便？其实也只需要简单的几步就可以了。 首先我们从MyBatis的逆向工程Github仓库下载最新的jar包,还有MyBatis和MySQL的jar包。获取相关jar包点击百度云，密码：5703 逆向工程的配置1. 新建项目，导入Jar包使用IDEA新建一个Java项目，导入我们刚刚下载的三个jar包。[说明]怎么导入jar包呢？ 在java项目中新建一个文件夹lib,并将需要导入的jar包复制到lib文件夹中 选中jar包，右键点击“Build Path” ==&gt; “Add to Build Path “ 之后该jar包就已经成功添加到了java项目中了。此时你的java项目中多了一个Referenced Libraries 库，该库里面就是成功添加了相关jar包 包解析 mybatis-generator-core-1.3.5.jar （逆向工程核心包 ） mybatis-3.2.3.jar（MyBatis3.x jar包 ） mysql-connector-java-5.1.28-bin.jar（MySQL连接jar包）### 2. 新建逆向工程的配置文件在src包下创建逆向工程的配置文件generatorConfig.xml,直接拷贝官方介绍中的XML配置即可.1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\" \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"&gt;&lt;generatorConfiguration&gt; &lt;context id=\"testTables\" targetRuntime=\"MyBatis3\"&gt; &lt;commentGenerator&gt; &lt;!-- 是否去除自动生成的注释 true：是 false:否 --&gt; &lt;property name=\"suppressAllComments\" value=\"true\"/&gt; &lt;/commentGenerator&gt; &lt;!--数据库连接信息：驱动类、连接地址、用户名、密码 --&gt; &lt;jdbcConnection driverClass=\"com.mysql.cj.jdbc.Driver\" connectionURL=\"jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC\" userId=\"root\" password=\"root\"&gt; &lt;/jdbcConnection&gt; &lt;!-- 默认为false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer， 为true时，把JDBC DECIMAL 和 NUMERIC 类型解析为 java.math.BigDecimal --&gt; &lt;javaTypeResolver&gt; &lt;property name=\"forceBigDecimals\" value=\"false\"/&gt; &lt;/javaTypeResolver&gt; &lt;!-- 生成Model类的位置 --&gt; &lt;javaModelGenerator targetPackage=\"cn.huoyuwang.ssm.po\" targetProject=\".\\src\"&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name=\"enableSubPackages\" value=\"false\"/&gt; &lt;!-- 从数据库返回的值被清理前后的空格 --&gt; &lt;property name=\"trimStrings\" value=\"true\"/&gt; &lt;/javaModelGenerator&gt; &lt;!-- 生成mapper映射文件的位置 --&gt; &lt;sqlMapGenerator targetPackage=\"cn.huoyuwang.ssm.mapper\" targetProject=\".\\src\"&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name=\"enableSubPackages\" value=\"false\"/&gt; &lt;/sqlMapGenerator&gt; &lt;!-- 生成Dao接口的位置 --&gt; &lt;javaClientGenerator type=\"XMLMAPPER\" targetPackage=\"cn.huoyuwang.ssm.dao\" targetProject=\".\\src\"&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name=\"enableSubPackages\" value=\"false\"/&gt; &lt;/javaClientGenerator&gt; &lt;!-- 指定数据库的表 --&gt; &lt;table tableName=\"book\"&gt;&lt;/table&gt; &lt;!-- 有些表的字段需要指定java类型 &lt;table schema=\"\" tableName=\"\"&gt; &lt;columnOverride column=\"\" javaType=\"\" /&gt; &lt;/table&gt; --&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt;XML内容都加了注释，我们只要修改几个地方就可以了 数据库连接信息 生成Model、Mapper、Dao 类的位置 数据库的表 table### 3.执行代码在src包下新建一个Main.java 文件, 内容也是从官方那里Copy过来的123456789101112131415161718192021222324252627282930313233import org.mybatis.generator.api.MyBatisGenerator;import org.mybatis.generator.config.Configuration;import org.mybatis.generator.config.xml.ConfigurationParser;import org.mybatis.generator.internal.DefaultShellCallback;import java.io.File;import java.util.ArrayList;import java.util.List;public class Main &#123; public void generator() throws Exception&#123; List&lt;String&gt; warnings = new ArrayList&lt;String&gt;(); boolean overwrite = true; //指定逆向工程de配置文件 File configFile = new File(\"src/generatorConfig.xml\"); ConfigurationParser cp = new ConfigurationParser(warnings); Configuration config = cp.parseConfiguration(configFile); DefaultShellCallback callback = new DefaultShellCallback(overwrite); MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings); myBatisGenerator.generate(null); &#125; public static void main(String[] args) throws Exception&#123; // write your code here try &#123; Main generatorSqlmap = new Main(); generatorSqlmap.generator(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125;运行程序，刷新程序。就会看到生成的如下源代码: 快速使用 github clone 用你的IDEA打开即可。","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"},{"name":"后端","slug":"技术/后端","permalink":"http://yoursite.com/categories/技术/后端/"},{"name":"java","slug":"技术/后端/java","permalink":"http://yoursite.com/categories/技术/后端/java/"},{"name":"mybatis","slug":"技术/后端/java/mybatis","permalink":"http://yoursite.com/categories/技术/后端/java/mybatis/"}],"tags":[{"name":"后端","slug":"后端","permalink":"http://yoursite.com/tags/后端/"},{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"},{"name":"mybatis","slug":"mybatis","permalink":"http://yoursite.com/tags/mybatis/"}]},{"title":"我的简历","slug":"简历","date":"2017-12-14T08:25:31.000Z","updated":"2017-12-14T09:09:26.753Z","comments":true,"path":"2017/12/14/简历/","link":"","permalink":"http://yoursite.com/2017/12/14/简历/","excerpt":"","text":"联系方式 手机：15114018540 Email：373297055@qq.com QQ/微信号：15114018540 个人信息 苟鸿人/男/1990 本科/西南石油大学计算机系 工作年限：3年 技术博客：http://coder0007.github.io 期望职位：Web前端高级工程师，java后端中级工程师 期望薪资：税前月薪15k~20k，特别喜欢的公司可例外 期望城市：成都 工作经历ABC公司 （ 2012年9月 ~ 2014年9月 ）DEF项目我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。 GHI项目我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。 其他项目（每个公司写2~3个核心项目就好了，如果你有非常大量的项目，那么按分类进行合并，每一类选一个典型写出来。其他的一笔带过即可。） JKL公司 （ 2010年3月 ~ 2012年8月 ）MNO项目我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。 PQR项目我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。 其他项目（每个公司写2~3个核心项目就好了，如果你有非常大量的项目，那么按分类进行合并，每一类选一个典型写出来。其他的一笔带过即可。） 技术文章（挑选你写作或翻译的技术文章，好的文章可以从侧面证实你的表达和沟通能力，也帮助招聘方更了解你） 一个产品经理眼中的云计算：前生今世和未来 来自HeroKu的HTTP API 设计指南(翻译文章) （ 好的翻译文章可以侧证你对英文技术文档的阅读能力） 演讲和讲义（放置你代表公司在一些技术会议上做过的演讲，以及你在公司分享时制作的讲义） 2014架构师大会演讲：如何通过Docker优化内部开发 9月公司内部分享：云计算的前生今世 技能清单以下均为我熟练使用的技能 Web开发：PHP/Hack/Node Web框架：ThinkPHP/Yaf/Yii/Lavaral/LazyPHP 前端框架：Bootstrap/AngularJS/EmberJS/HTML5/Cocos2dJS/ionic 前端工具：Bower/Gulp/SaSS/LeSS/PhoneGap 数据库相关：MySQL/PgSQL/PDO/SQLite 版本管理、文档和自动化部署工具：Svn/Git/PHPDoc/Phing/Composer 单元测试：PHPUnit/SimpleTest/Qunit 云和开放平台：SAE/BAE/AWS/微博开放平台/微信应用开发 参考技能关键字 javascript css html jquery html5 ajax css3 java springmvc xml json bootstrap http nodejs angularjs mvc github mysql flex webapp 致谢感谢您花时间阅读我的简历，期待能有机会和您共事。","categories":[{"name":"简历","slug":"简历","permalink":"http://yoursite.com/categories/简历/"},{"name":"我的简历","slug":"简历/我的简历","permalink":"http://yoursite.com/categories/简历/我的简历/"}],"tags":[{"name":"简历","slug":"简历","permalink":"http://yoursite.com/tags/简历/"}]},{"title":"springMVC基础实战演练","slug":"springMVC基础学习","date":"2017-12-14T08:02:13.000Z","updated":"2017-12-15T07:46:26.656Z","comments":true,"path":"2017/12/14/springMVC基础学习/","link":"","permalink":"http://yoursite.com/2017/12/14/springMVC基础学习/","excerpt":"","text":"1. SpringMVC架构1.1 Spring web mvc介绍Spring web mvc和Struts2都属于表现层的框架,它是Spring框架的一部分,我们可以从Spring的整体结构中看得出来： 1.2 Web MVC1.2.1 架构图mvc设计模式在b/s系统下应用： 1.2.2 架构流程 用户发起request请求至控制器(Controller)，控制接收用户请求的数据，委托给模型进行处理。 控制器通过模型(Model)处理数据并得到处理结果，模型通常是指业务逻辑。 模型处理结果返回给控制器。 控制器将模型数据在视图(View)中展示，web中模型无法将数据直接在视图上显示，需要通过控制器完成。如果在C/S应用中模型是可以将数据在视图中展示的。 控制器将视图response响应给用户–通过视图展示给用户要的数据或处理结果。 1.3 Spring web mvc架构1.3.1 架构图 1.3.2 架构流程 用户发送请求至前端控制器(DispatcherServlet)。 前端控制器(DispatcherServlet)收到请求调用处理器映射器(HandlerMapping)–处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。 前端控制器(DispatcherServlet)通过处理器适配器(HandlerAdapter)调用处理器–执行处理器(Controller，也叫后端控制器)，Controller执行完成返回ModelAndView对象；HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。 DispatcherServlet将ModelAndView传给ViewReslover视图解析器–ViewReslover解析后返回具体View。 DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）。 DispatcherServlet响应用户 1.3.3 组件说明DispatcherServlet：前端控制器用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的耦合性。HandlerMapping：处理器映射器HandlerMapping负责根据用户请求找到Handler即处理器，springmvc提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。Handler：处理器Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。由于Handler涉及到具体的用户业务请求，所以一般情况需要程序员根据业务需求开发Handler。HandlAdapter：处理器适配器通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。View Resolver：视图解析器View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。 springmvc框架提供了很多的View视图类型，包括：jstlView、freemarkerView、pdfView等。一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。 2. 商品订单业务说明本教程在通过商品订单业务学习使用springmvc进行功能开发。 2.1 业务流程 管理员维护商品信息 用户挑选商品，购买，创建订单 2.2 数据库环境获取sql文件请点击百度云 ，密码：dwlw先导入sql_table.sql（表结构），再导入 sql_data.sql（表数据） 如图： 2.3 商品订单数据模型 3. SpringMVC入门3.1 需求实现商品查询列表功能。 3.2 开发环境准备本教程使用myEclipse+tomcat7开发 3.3 第一步:建立一个Web项目在myEclipse下创建动态web工程springmvc_first。步骤：File ==&gt; New ==&gt; Web Project如图：注意：选择java EE version选择javaEE5-web2.5,选择javaEE6或javaEE7生成的项目在WEB-INF目录下面找不到web.xml。 3.4 第二步:导入spring3.2.0的jar包需要spring3.2所有jar（一定包括spring-webmvc-3.2.0.RELEASE.jar）获取相关jar包请点击百度云，密码：p7qg把上面所有的jar包放入WebRoot/WEB-INF/lib目录中 3.5 第三步：前端控制器配置12345678910111213&lt;servlet&gt;&lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;&lt;init-param&gt;&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;&lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;&lt;/init-param&gt;&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt;&lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;&lt;url-pattern&gt;*.action&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; [说明] load-on-startup：表示servlet随服务启动； url-pattern：*.action的请交给DispatcherServlet处理。 contextConfigLocation：指定springmvc配置的加载位置，如果不指定则默认加载WEB-INF/[DispatcherServlet 的Servlet 名字]-servlet.xml。 3.5.1 Servlet拦截方式 拦截固定后缀的url，比如设置为 .do、.action， 例如：/user/add.action ,此方法最简单，不会导致静态资源（jpg,js,css）被拦截。 拦截所有，设置为/，例如：/user/add /user/add.action,此方法可以实现REST风格的url，很多互联网类型的应用使用这种方式；但是此方法会导致静态文件（jpg,js,css）被拦截后不能正常显示。需要特殊处理。 拦截所有，设置为/*，此设置方法错误，因为请求到Action，当action转到jsp时再次被拦截，提示不能根据jsp路径mapping成功。 3.6 第四步：springmvc配置文件Springmvc默认加载WEB-INF/[前端控制器的名字]-servlet.xml，也可以在前端控制器定义处指定加载的配置文件，如下： 1234&lt;init-param&gt;&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;&lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;&lt;/init-param&gt; 如上代码，通过contextConfigLocation加载classpath下的springmvc.xml配置文件。需要新建一个Source Folder：config步骤：鼠标右键springmvc_first ==&gt; New ==&gt; Source Folder 如下图：在config文件里面创建springmvc.xml 3.7 第五步：配置处理器适配器在springmvc.xml文件配置如下： 12345678910111213141516&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:mvc=\"http://www.springframework.org/schema/mvc\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd \"&gt; &lt;bean class=\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\"/&gt; &lt;/beans&gt; [说明]SimpleControllerHandlerAdapter：即简单控制器处理适配器，所有实现了org.springframework.web.servlet.mvc.Controller 接口的Bean作为Springmvc的后端控制器。 3.8 第六步：处理器开发在项目的src目录下新建两个Package：cn.huoyuwang.ssm.controller和cn.huoyuwang.ssm.pocn：域名huoyuwang：公司名或项目名ssm：项目框架controller：写得所有处理器放在里面po：实体类（po里面的实体类文件由mybatis逆向工程生成，生成的步骤请参考：）在controller目录下新建一个class文件：ItemList 123456789101112131415161718192021222324public class ItemList implements Controller &#123; @Override public ModelAndView handleRequest(HttpServletRequest request,HttpServletResponse response) throws Exception &#123; //商品列表 List&lt;Items&gt; itemsList = new ArrayList&lt;Items&gt;(); Items items_1 = new Items(); items_1.setName(\"联想笔记本\"); items_1.setPrice(6000f); items_1.setDetail(\"ThinkPad T430 联想笔记本电脑！\"); Items items_2 = new Items(); items_2.setName(\"苹果手机\"); items_2.setPrice(5000f); items_2.setDetail(\"iphone6苹果手机！\"); itemsList.add(items_1); itemsList.add(items_2); //创建modelAndView准备填充数据、设置视图 ModelAndView modelAndView = new ModelAndView(); //填充数据 modelAndView.addObject(\"itemsList\", itemsList); //视图 modelAndView.setViewName(\"order/itemsList\"); return modelAndView; &#125;&#125;","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"},{"name":"后端","slug":"技术/后端","permalink":"http://yoursite.com/categories/技术/后端/"},{"name":"java","slug":"技术/后端/java","permalink":"http://yoursite.com/categories/技术/后端/java/"},{"name":"springmvc","slug":"技术/后端/java/springmvc","permalink":"http://yoursite.com/categories/技术/后端/java/springmvc/"}],"tags":[{"name":"后端","slug":"后端","permalink":"http://yoursite.com/tags/后端/"},{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"},{"name":"springmvc","slug":"springmvc","permalink":"http://yoursite.com/tags/springmvc/"}]},{"title":"hexo+github搭建个人博客","slug":"hexo-github搭建个人博客","date":"2017-12-14T07:55:45.000Z","updated":"2017-12-26T08:19:43.487Z","comments":true,"path":"2017/12/14/hexo-github搭建个人博客/","link":"","permalink":"http://yoursite.com/2017/12/14/hexo-github搭建个人博客/","excerpt":"","text":"参考博文：手把手教你用Hexo+Github 搭建属于自己的博客20分钟教你使用hexo搭建github博客 什么是 Hexo？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 搭建步骤 搭建环境准备（包括node.js和git环境，gitHub账户的配置） 安装Hexo 配置Hexo 怎样将Hexo与github page 联系起来 怎样发布文章 主题 推荐 主题Net的简单配置 添加sitemap和feed插件 添加404 公益页面 前提条件(环境准备) nodejs环境配置 git环境配置 github帐号注册 配置Node.js环境下载Node.js：nodejs链接，根据你自己的操作系统下载相应的安装包。注意：windows XP是安装不了的。如图所示： 保持默认设置即可，一路Next，安装很快就结束了。检查一下是不是要求的组件都安装好了，同时按下Win和R，打开运行窗口： 在新打开的窗口中输入cmd，敲击回车，打开命令行界面。（下文将直接用打开命令行来表示以上操作，记住哦~）在打开的命令行界面中，输入12node -vnpm -v 说明：？？？？？？？？？？ 如果结果如下图所示，则说明安装正确，可以进行下一步了，如果不正确，则需要回头检查自己的安装过程。 配置git环境下载Git安装文件：GIt官网下载地址,根据自己的操作系统选择安装包。 然后就进入了Git的安装界面，如图： 和Node.js一样，大部分设置都只需要保持默认，但是出于我们操作方便考虑，建议PATH选项按照下图选择：Git PATH设置这是对上图的解释，不需要了解请直接跳过 Git的默认设置下，出于安全考虑，只有在Git Bash中才能进行Git的相关操作。按照上图进行的选择，将会使得Git安装程序在系统PATH中加入Git的相关路径，使得你可以在CMD界面下调用Git，不用打开Git Bash了。一样的，我们来检查一下Git是不是安装正确了，打开命令行，输入：1git --version如果结果如下图所示，则说明安装正确，可以进行下一步了，如果不正确，则需要回头检查自己的安装过程。 github账户的注册和配置如果已经拥有账号，请跳过此步~ 第一步: Github注册打开github ，在下图的框中，分别输入自己的用户名，邮箱，密码。 点击创建按钮，进入到第二步，选择无限的免费的仓库，当然了，你也可以选择无限的付费的库 选择继续，然后前往自己刚才填写的邮箱，点开Github发送给你的注册确认信，确认注册，结束注册流程。 一定要确认注册，否则无法使用gh-pages！ 第二步: 创建代码库登陆之后，点击页面右上角的加号，选择New repository： 新建代码库进入代码库创建页面：在Repository name下填写yourname.github.io，Description (optional)下填写一些简单的描述（不写也没有关系），如图所示： 注意：比如我的github名称是gouhongren ,这里你就填 gouhongren.github.io,如果你的名字是zhangsan，那你就填 zhangsan.github.io 第三步: 代码库设置正确创建之后，你将会看到如下界面： 接下来开启gh-pages功能，点击界面右侧的Settings，你将会打开这个库的setting页面，向下拖动，直到看见GitHub Pages，如图： 点击Choose a theme，选择一个主题，点击select theme。 Github将会自动替你创建出一个gh-pages的页面。选择Commit changes。如果你的配置没有问题，那么大约15分钟之后，yourname.github.io这个网址就可以正常访问了~ 如果yourname.github.io已经可以正常访问了，那么Github一侧的配置已经全部结束了。到此搭建hexo博客的相关环境配置已经完成，下面开始讲解Hexo的相关配置## 安装Hexo在自己认为合适的地方创建一个文件夹，这里我在桌面新建一个文件夹：hexo；打开文件夹，右键选择Git Brash Here在命令行中输入：1npm install hexo -g意思是通过nodejs的包管理组件npm在全局安装hexo然后你会看到可能你会看到一个WARN，但是不用担心， 在命令行中输入：1hexo -v如果你看到了如图文字，则说明已经安装成功了。 hexo的相关配置初始化Hexo 接着上面的操作，输入：1hexo init 然后输入：1npm install 之后npm将会自动安装你需要的组件，只需要等待npm操作即可。 首次体验Hexo继续操作，同样是在命令行中，输入：1hexo g 然后输入：1hexo s 然后会提示： INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.在浏览器中打开http://localhost:4000/，你将会看到: 到目前为止，Hexo在本地的配置已经全都结束了。 下面会讲解怎样将Hexo与github page 联系起来 怎样将Hexo与github page 联系起来大概分为以下几步 配置git个人信息 配置Deployment 配置Git个人信息 配置git个人信息如果你之前已经配置好git个人信息，请跳过这一个 步骤，直接来到 设置Git的user name和email：(如果是第一次的话) 12git config --global user.name &quot;gouhongren&quot;git config --global user.email &quot;gouhongren@163.com&quot; 生成密钥 1ssh-keygen -t rsa -C &quot;gouhongren@163.com&quot; 一路Enter过来就好，待秘钥生成完毕，会得到两个文件id_rsa和id_rsa.pub，用带格式的记事本打开id_rsa.pub，Ctrl + a，ctrl+c复制里面的所有内容 github配置ssh key然后进入github首页，点击右上角的小图标，选择setting，如图所示进入下一个页面，选择SSH and GPK keys然后选择New SSH keys，如图：进入下一个页面，title随便取名，key来自于前面id_rsa.pub里面的内容，点击Add SSH keys如果显示如下页面表示添加ssh key成功 配置Deployment在项目hexo文件夹的根目录找到_config.yml,打开它在文本结尾找到deploy，然后按照如下修改：1234deploy: type: git repo: https://github.com/yourname/yourname.github.io.git branch: master 在项目hexo文件夹的根目录找到_config.yml,打开它在文本结尾找到deploy，比如我的仓库的地址是https://github.com/gouhongren/gouhongren.github.io.git，所以配置如下1234deploy: type: git repo: https://github.com/gouhongren/gouhongren.github.io.git branch: master 写博客、发布文章新建一篇博客，执行下面的命令：(artical title这里是你自己要写博客的名称)1hexo new post &quot;我的第一篇博客&quot; 这时候在如下目录下 hexo\\source\\ _posts 将会看到 我的第一篇博客.md 文件用MarDown编辑器（我使用的是HBuilder）打开就可以编辑文章了(这里需要了解一些基本的markdown写法，参考：点击我 ，很简单吧)。我们写下：1你好，欢迎来到我的个人技术博客。如图： 文章编辑好之后，运行生成、部署命令： 12hexo g // 生成hexo s // 启动本地服务 在浏览器中输入：localhost:4000,就会看到： 那么如何把写的博客部署到远程仓库呢？ ？？？？？？？？？？？？？？？？？ 当然你也可以执行下面的命令，相当于上面两条命令的效果1hexo d -g #在部署前先生成","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"},{"name":"前端","slug":"技术/前端","permalink":"http://yoursite.com/categories/技术/前端/"},{"name":"nodejs","slug":"技术/前端/nodejs","permalink":"http://yoursite.com/categories/技术/前端/nodejs/"},{"name":"hexo","slug":"技术/前端/nodejs/hexo","permalink":"http://yoursite.com/categories/技术/前端/nodejs/hexo/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"},{"name":"后端","slug":"后端","permalink":"http://yoursite.com/tags/后端/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"博客","slug":"博客","permalink":"http://yoursite.com/tags/博客/"}]}]}